// Programme exemple1.yxx
//   bison exemple1.yxx
//   g++ -o exemple1 exemple1.tab.cxx
//   ./exemple1
//     1 0 1 + +<Entrée>
//       --> 2
//     01-1-<Entrée>
//       --> -2
//     3<Entrée>
//       erreur lors de l'analyse : syntax error

//****** Prologue C++ ******
%{
  #define YYSTYPE int
  #include <iostream>
  int yylex (void);
  void yyerror (char const *);
  int j = 0;
  int i = 0;
  int n = 0;
%}

// ****** Grammaire ******
%%
input: // ligne vide
     | input ligne
;

ligne: '\n'
     //| exp '\n' { std::cout << " --> " << $1 << std::endl; }
     | S '\n'  {std::cout<<"i: "<<i<<", j:"<<j<<std::endl;}
     | N '\n' {std::cout<<"n: "<<n<<std::endl;}
     | G '\n' { std::cout << " --> " << $1 << std::endl; }
;
/*
exp: '0'         { $$ = 0 ; }
   | '1'         { $$ = 1 ; }
   | exp exp '+' { $$ = $1 + $2; }
   | exp exp '-' { $$ = $1 - $2; }
;*/

S: 'a' S {i++;}
  | 'b' 'c' S
  | 'd' {j++;}
;

N: 'a'N'b' {n++;}
  | 'a''b' {n++;}
;

// exercice 2

G: somme {$$ = $1;}
;

produit: produit facteur {$$ = $1 * $2;}
        | facteur {$$= $1;}
;

facteur: '(' somme ')' {$$= $2;}
        | terme {$$= $1;}
;

somme: somme '+' produit {$$ = $1 + $3;}
      | produit {$$= $1;}
;

terme: '0' {$$=0;}
      | '1' {$$=1;}
      | '2' {$$=2;}
      | '3' {$$=3;}
      | '4' {$$=4;}
      | '5' {$$=5;}
      | '6' {$$=6;}
      | '7' {$$=7;}
      | '8' {$$=8;}
      | '9' {$$=9;}
;

// ****** Épilogue C++ ******
%%

// Appelé par l'analyseur en cas d'erreur
void yyerror (char const * s) {
    std::cout << "erreur lors de l'analyse : " << s << std::endl;
}

// Fait une analyse syntaxique caractère par caractère
int yylex (void) {
    char c;
    std::cin >> c;
    while (c == ' ' || c == '\t') {
        std::cin >> c;
    }
    return c;
}

// Le programme principal
int main (void) {
    std::cin.unsetf(std::ios_base::skipws);
    return yyparse ();
}

